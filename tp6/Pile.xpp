template<typename T>
Pile<T>::Pile(int const taille)
{
    if (taille > 0)
    {
        Capacity = taille;
        tab = new int[Capacity];
    }
    else
        throw std::invalid_argument("Taille négative ou nulle");
}

template<typename T>
Pile<T>::~Pile()
{
    delete[] tab;
}

template<typename T>
bool Pile<T>::empty()
{
    if (Capacity > 0)
    {
        return Taille == 0;
    }
    else
        throw std::invalid_argument("Taille négative ou nulle");
}

template<typename T>
void Pile<T>::push(int a)
{
    if (Taille < Capacity)
    {
        tab[Taille] = a;
        Taille++;
    }
}

template<typename T>
void Pile<T>::pop()
{
    if (Taille > 0)
    {
        Taille--;
    }
    else
        throw std::invalid_argument("Taille négative ou nulle");
}